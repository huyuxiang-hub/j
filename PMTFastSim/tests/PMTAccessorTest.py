#!/usr/bin/env python
"""
PMTAccessorTest.py
====================

Very Small 4e-16 diff between RINDEX ? G4 vs NP interpolation imps ?::

    In [14]: ab.max()                                                                                                            
    Out[14]: 4.440892098500626e-16   ## in nm 

    In [12]: np.where( ab > 1e-20 )                                                                                              
    Out[12]: 
    (array([0, 1, 2, 2, 2, 2]),
     array([ 9,  9,  9, 10, 11, 11]),
     array([2, 2, 2, 2, 1, 2]),
     array([0, 0, 0, 0, 0, 1]))
 
    ## mostly PHC_RINDEX showing difference across small energy range 

    In [4]: w = np.where( ab > 1e-16)

    In [5]: t.a[w]
    Out[5]: array([2.428, 2.46 , 2.836, 2.659, 1.954, 1.94 ])

    In [6]: t.b[w]
    Out[6]: array([2.428, 2.46 , 2.836, 2.659, 1.954, 1.94 ])

    In [39]: t.a[0,0]                                                                                                            
    Out[39]: 
    array([[ 1.469,  0.   ,  0.   ,  0.   ],
           [ 1.868,  0.   , 36.49 ,  0.   ],
           [ *2.728*,  0.897, 21.13 ,  0.   ],
           [ 1.   ,  0.   ,  0.   ,  0.   ]])

    In [40]: t.b[0,0]                                                                                                            
    Out[40]: 
    array([[ 1.469,  0.   ,  0.   ,  0.   ],
           [ 1.868,  0.   , 36.49 ,  0.   ],
           [ 2.728,  0.897, 21.13 ,  0.   ],
           [ 1.   ,  0.   ,  0.   ,  0.   ]])


Thickness also slight diff::

    In [16]: (t.a[0,:,2,2] - t.b[0,:,2,2]).max()
    Out[16]: -3.552713678800501e-15

    In [17]: t.a[0,:,2,2]
    Out[17]: 
    array([21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13,
           21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13,
           21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13,
           21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13])

    In [18]: t.b[0,:,2,2]
    Out[18]: 
    array([21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13,
           21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13,
           21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13,
           21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13, 21.13])

    In [20]: tab = t.a[0,:,2,2] - t.b[0,:,2,2]

    In [21]: tab[0]
    Out[21]: -3.552713678800501e-15

    In [22]: np.all( tab == tab[0] )
    Out[22]: True




    epsilon:DetSim blyth$ cat PMTProperty/*/THICKNESS
    ARC_THICKNESS   40.00e-9*m
    ARC_THICKNESS   10.24e-9*m
    ARC_THICKNESS   36.49e-9*m

    PHC_THICKNESS   20.58e-9*m
    PHC_THICKNESS   18.73e-9*m
    PHC_THICKNESS   21.13e-9*m
    epsilon:DetSim blyth$ 


    In [4]: np.unique( t.a[:,:,1,2], return_counts=True  )
    Out[4]: (array([10.24, 36.49, 40.  ]), array([100, 100, 100]))

    In [5]: np.unique( t.b[:,:,1,2], return_counts=True  )
    Out[5]: (array([10.24, 36.49, 40.  ]), array([100, 100, 100]))


    In [8]: t.a[2,:,1,2] - 10.24   # a is from PMTAccessor : with const values very slightly off  
    Out[8]: 
    array([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,
           -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,
           -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.])

    In [9]: t.b[2,:,1,2] - 10.24   # b is from JPMT : which gives the value precisely 
    Out[9]: 
    array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0.])


Tracing the constants, maybe the slight precision loss could be avoided by storing nm (not m)::

    epsilon:CONST blyth$ i

    In [1]: a = np.load("000.npy")                                                                                                            

    In [2]: a                                                                                                                                 
    Out[2]: array([0., 0.])

    In [3]: a*1e6                                                                                                                             
    Out[3]: array([40.  , 20.58])

    In [4]: b = np.load("001.npy")                                                                                                            

    In [5]: b*1e6                                                                                                                             
    Out[5]: array([36.49, 21.13])

    In [9]: b[1]                                                                                                                              
    Out[9]: 2.1130000000000003e-05





"""

import numpy as np
from opticks.ana.fold import Fold

if __name__ == '__main__':
    t = Fold.Load(symbol="t")
    print(repr(t))

    ab = t.a - t.b 

pass

